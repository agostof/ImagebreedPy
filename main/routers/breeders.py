from fastapi import APIRouter
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi import Request
import requests
import main.services.utils as utils

templates = Jinja2Templates(directory=utils.DIRECTORY + "breeders")
router = APIRouter(prefix="/breeders")

### STATIC PAGES fro Breeders Toolbox pages of interest
# These were downloaded using wget and are served as static pages
# They are usually generated by the CatalystServer and we are just saving the outcome.
# STATIC PAGE FOR DRONE ROVER
@router.get("/drone_rover", response_class=HTMLResponse)
async def breeders_tool_box_drone_rover(request: Request):
    print("STATIC_PAGE: drone_rover")
    return templates.TemplateResponse("drone_rover.html", {"request": request, "id": id})

# STATIC PAGE FOR DRONE IMAGERY
@router.get("/drone_imagery", response_class=HTMLResponse)
async def breeders_toolbox_drone_imagery(request: Request):
    print("STATIC_PAGE: drone_imagery")
    return templates.TemplateResponse("drone_imagery.html", {"request": request, "id": id})


@router.get("/{path:path}")
async def breeders_tool_box(path: str, in_request: Request):
#    print(f"COOKIES LIST: {in_request.cookies}")
#    print(f"COOKIES: {in_request.cookies}")
    global ACTION_POINTER

    app_cookies = utils.dump_cookies(in_request)
    print("APP_COOKIES", app_cookies)

    if "drone_rover" in path:
        utils.increase_action_pointer()
    utils.update_action_log(path)

    sgn_session_id = in_request.cookies.get("sgn_session_id")
    user_prefs = in_request.cookies.get("user_prefs")
    print(f"SESSION_ID: {sgn_session_id}")
    print(f"user_prefs: {user_prefs}")

    url = f'{utils.UPSTREAM_HOST}/breeders/{path}'
    print("breeders_tool_box", url)
    response = requests.get(url, params=in_request.query_params, cookies=app_cookies)
    #print(url, request.query_params)
    #return response.text
    #return RedirectResponse(url=url)
    out_response = HTMLResponse(content=response.content, status_code=response.status_code)
    print("RESPONSE", response.cookies)
    utils.copy_cookies(in_request, out_response)
    return out_response

