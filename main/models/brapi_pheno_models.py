# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Phenotyping-2.0-resolved.yaml
#   timestamp: 2021-03-24T21:08:46+00:00
# Note: The auto-generated code was edited to remove 
#   redundancies and errors, and add examples.
#   See modelgen_utils for details.

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, constr, RootModel, validator

# from brapi_v2.core.models import (
from main.models.brapi_core_models import (
    Context,
    ExternalReferences,
    GeoJSON,
    GeoJSONSearchArea,
    Metadata,
    Method,
    MethodBaseClass,
    ObservationUnitHierarchyLevel,
    Scale,
    ScaleBaseClass,
    SearchRequestParametersExternalReferences,
    SearchRequestParametersGermplasm,
    SearchRequestParametersLocations,
    SearchRequestParametersObservationVariables,
    SearchRequestParametersPaging,
    SearchRequestParametersPrograms,
    SearchRequestParametersStudies,
    SearchRequestParametersTrials,
    Trait,
    TraitBaseClass,
    TraitDataType,
    VariableBaseClass,
    Season,
)

class ObservationsPutRequest(BaseModel):
    pass


class ObservationunitsPutRequest(BaseModel):
    pass

class HeaderRowEnum(Enum):
    observationTimeStamp = 'observationTimeStamp'
    observationUnitDbId = 'observationUnitDbId'
    observationUnitName = 'observationUnitName'
    studyDbId = 'studyDbId'
    studyName = 'studyName'
    germplasmDbId = 'germplasmDbId'
    germplasmName = 'germplasmName'
    positionCoordinateX = 'positionCoordinateX'
    positionCoordinateY = 'positionCoordinateY'
    year = 'year'
    field = 'field'
    plot = 'plot'
    sub_plot = 'sub-plot'
    plant = 'plant'
    pot = 'pot'
    block = 'block'
    entry = 'entry'
    rep = 'rep'


class ObservationTreatment(BaseModel):
    factor: Optional[str] = Field(
        None,
        description="The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
        example='fertilizer',
    )
    modality: Optional[str] = Field(
        None,
        description="The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
        example='low fertilizer',
    )

class ObservationUnitLevelRelationship(ObservationUnitHierarchyLevel):
    levelCode: Optional[str] = Field(
        None,
        description='An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists',
        example='Plot_123',
    )


class EntryType(Enum):
    CHECK = 'CHECK'
    TEST = 'TEST'
    FILLER = 'FILLER'

class PositionCoordinateType(Enum):
    LONGITUDE = 'LONGITUDE'
    LATITUDE = 'LATITUDE'
    PLANTED_ROW = 'PLANTED_ROW'
    PLANTED_INDIVIDUAL = 'PLANTED_INDIVIDUAL'
    GRID_ROW = 'GRID_ROW'
    GRID_COL = 'GRID_COL'
    MEASURED_ROW = 'MEASURED_ROW'
    MEASURED_COL = 'MEASURED_COL'



# note: Commented out from the Auto-generated to diferentiate from HeaderRowEnum(Enum) 
#       and since it is specific to ObservationUnitTable
class HeaderRowObservationUnitTable(Enum):
    observationUnitDbId = 'observationUnitDbId'
    observationUnitName = 'observationUnitName'
    studyDbId = 'studyDbId'
    studyName = 'studyName'
    germplasmDbId = 'germplasmDbId'
    germplasmName = 'germplasmName'
    positionCoordinateX = 'positionCoordinateX'
    positionCoordinateY = 'positionCoordinateY'
    year = 'year'
    field = 'field'
    plot = 'plot'
    sub_plot = 'sub-plot'
    plant = 'plant'
    pot = 'pot'
    block = 'block'
    entry = 'entry'
    rep = 'rep'


class Ontology(BaseModel):
    additionalInfo: Optional[dict] = Field(
        None, description='Additional arbitrary info'
    )
    authors: Optional[str] = Field(
        None,
        description="Ontology's list of authors (no specific format)",
        example='Bob Robertson, Rob Robertson',
    )
    copyright: Optional[str] = Field(
        None, description='Ontology copyright', example='Copyright 1987, Bob Robertson'
    )
    description: Optional[str] = Field(
        None,
        description='Human readable description of Ontology',
        example='This is an example ontology that does not exist',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of this object',
        example='https://wiki.brapi.org/ontology',
    )
    licence: Optional[str] = Field(
        None, description='Ontology licence', example='MIT Open source licence'
    )
    ontologyDbId: str = Field(
        ..., description='Ontology database unique identifier', example='18e186cd'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Official Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='V1.3.2'
    )


class EventEventParameters(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Specifies the relationship between the event and the given property. E.g. fertilizer, operator',
        example='operator',
    )
    rdfValue: Optional[str] = Field(
        None,
        description='The type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent',
        example='http://xmlns.com/foaf/0.1/Agent',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the property for this event. E.g. nitrogen, John Doe',
        example='Bob Robertson',
    )

class ObservationTableObservationVariables(BaseModel):
    observationVariableDbId: Optional[str] = Field(
        None, description='Variable unique identifier', example='367aa1a9'
    )
    observationVariableName: Optional[str] = Field(
        None, description='Variable name (usually a short name)', example='Plant height'
    )


class ObservationLevelListResponseResult(BaseModel):
    data: List[ObservationUnitHierarchyLevel] = Field(
        ...,
        example=[
            {'levelName': 'field', 'levelOrder': 0},
            {'levelName': 'block', 'levelOrder': 1},
            {'levelName': 'plot', 'levelOrder': 2},
            {'levelName': 'sub-plot', 'levelOrder': 3},
            {'levelName': 'plant', 'levelOrder': 4},
        ],
    )


class OntologyListResponseResult(BaseModel):
    data: List[Ontology]

class Event(BaseModel):
    additionalInfo: Optional[dict] = Field(
        None, description='Additional arbitrary info'
    )
    date: Optional[List[datetime]] = Field(
        None,
        description='A list of dates when the event occurred\n\nMIAPPE V1.1 (DM-68) Event date - Date and time of the event.',
        example=['2018-10-08T18:15:11Z', '2018-11-09T18:16:12Z'],
    )
    eventDbId: str = Field(
        ..., description='Internal database identifier', example='8566d4cb'
    )
    eventDescription: Optional[str] = Field(
        None,
        description='A detailed, human-readable description of this event\n\nMIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. ',
        example='A set of plots was watered',
    )
    eventParameters: Optional[List[EventEventParameters]] = Field(
        None,
        description='A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI',
        example=[
            {
                'key': 'http://www.example.fr/vocabulary/2018#hasContact,',
                'value': 'http://www.example.fr/id/agent/marie,',
                'valueRdfType': 'http://xmlns.com/foaf/0.1/Agent,',
            },
            {'key': 'fertilizer', 'value': 'nitrogen'},
        ],
    )
    eventType: str = Field(
        ...,
        description='General category for this event (e.g. Sowing, Watering, Rain). Each eventType should correspond to exactly one eventTypeDbId, if provided.\n\nMIAPPE V1.1 (DM-65) Event type - Short name of the event.',
        example='Watering',
    )
    eventTypeDbId: Optional[str] = Field(
        None,
        description='An identifier for this event type, in the form of an ontology class reference\n\nMIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).',
        example='4e7d691e',
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study',
        example=['8439eaff', 'd7682e7a', '305ae51c'],
    )
    studyDbId: Optional[str] = Field(
        None, description='The study in which the event occurred', example='2cc2001f'
    )


class ObservationNewRequest(BaseModel):
    additionalInfo: Optional[dict] = Field(
        None, description='Additional arbitrary info'
    )
    collector: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which collected the observation',
        example='917d3ae0',
    )
    externalReferences: Optional[ExternalReferences] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='2408ab11',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000003',
    )
    observationTimeStamp: Optional[datetime] = Field(
        None, description='The date and time when this observation was made'
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example='598111d4',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationVariableDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation variable',
        example='c403d107',
    )
    observationVariableName: Optional[str] = Field(
        None,
        description='A human readable name for an observation variable',
        example='Plant Height in meters',
    )
    season: Optional[Season] = None
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='ef2829db',
    )
    uploadedBy: Optional[str] = Field(
        None,
        description='The name or id of the user who uploaded the observation to the database system',
        example='a2f7f60b',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the data collected as an observation',
        example='2.3',
    )


class ObservationSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersPrograms,
    SearchRequestParametersTrials,
    SearchRequestParametersStudies,
    SearchRequestParametersGermplasm,
    SearchRequestParametersLocations,
    SearchRequestParametersObservationVariables,
    SearchRequestParametersExternalReferences,
):
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation',
        example=['6a4a59d8', '3ff067e0'],
    )
    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships',
        example=[{'levelCode': 'Field_1', 'levelName': 'field'}],
    )
    observationLevels: Optional[List[ObservationUnitLevelRelationship]] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevel',
        example=[
            {'levelCode': 'Plot_123', 'levelName': 'plot'},
            {'levelCode': 'Plot_456', 'levelName': 'plot'},
            {'levelCode': 'Plot_789', 'levelName': 'plot'},
        ],
    )
    observationTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='Timestamp range end'
    )
    observationTimeStampRangeStart: Optional[datetime] = Field(
        None, description='Timestamp range start'
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation Unit',
        example=['76f559b5', '066bc5d3'],
    )
    seasonDbIds: Optional[List[str]] = Field(
        None,
        description='The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)',
        example=['Spring 2018', 'Season A'],
    )


class ObservationTable(BaseModel):
    data: Optional[List[List[str]]] = Field(
        None,
        description='Matrix of observation data recorded for different observation variables across different observation units',
        example=[
            [
                '2019-09-10T18:13:27.223Z',
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '25.3',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:14:27.223Z',
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '',
                '3',
                '',
                '',
            ],
            [
                '2019-09-10T18:15:54.868Z',
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '27.9',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:16:54.868Z',
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '',
                '1',
                '',
                '',
            ],
            [
                '2019-09-10T18:17:34.433Z',
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '',
                '3',
                '',
                '',
            ],
            [
                '2019-09-10T18:18:34.433Z',
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '25.5',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:19:15.629Z',
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '28.9',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:20:15.629Z',
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '',
                '0',
                '',
                '',
            ],
        ],
    )
    headerRow: Optional[List[HeaderRowEnum]] = Field(
        None,
        description='<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array "headerRow" will always contain "observationUnitDbId" and any or all of the OPTIONAL column header names. \nThe second array "observationVariables" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>',
        example=[
            'observationTimeStamp',
            'observationUnitDbId',
            'observationUnitName',
            'studyDbId',
            'studyName',
            'germplasmDbId',
            'germplasmName',
            'positionCoordinateX',
            'positionCoordinateY',
            'year',
            'field',
            'plot',
            'sub-plot',
            'plant',
            'pot',
            'block',
            'entry',
            'rep',
        ],
    )
    observationVariables: Optional[List[ObservationTableObservationVariables]] = Field(
        None,
        description="The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
        example=[
            {
                'observationVariableDbId': '367aa1a9',
                'observationVariableName': 'Plant height',
            },
            {
                'observationVariableDbId': '2acb934c',
                'observationVariableName': 'Carotenoid',
            },
            {
                'observationVariableDbId': '85a21ce1',
                'observationVariableName': 'Root color',
            },
            {
                'observationVariableDbId': '46f590e5',
                'observationVariableName': 'Virus severity',
            },
        ],
    )


class ObservationUnitSearchRequest(
    SearchRequestParametersPaging,
    SearchRequestParametersPrograms,
    SearchRequestParametersTrials,
    SearchRequestParametersStudies,
    SearchRequestParametersLocations,
    SearchRequestParametersGermplasm,
    SearchRequestParametersObservationVariables,
    SearchRequestParametersExternalReferences,
):
    includeObservations: Optional[bool] = Field(
        None,
        description='Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.',
        example=False,
    )
    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships',
        example=[{'levelCode': 'Field_1', 'levelName': 'field'}],
    )
    observationLevels: Optional[List[ObservationUnitLevelRelationship]] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevel',
        example=[
            {'levelCode': 'Plot_123', 'levelName': 'plot'},
            {'levelCode': 'Plot_456', 'levelName': 'plot'},
            {'levelCode': 'Plot_789', 'levelName': 'plot'},
        ],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an observation unit',
        example=['66bab7e3', '0e5e7f99'],
    )


class ObservationUnitTable(BaseModel):
    data: Optional[List[List[str]]] = Field(
        None,
        description='Matrix of observation data recorded for different observation variables across different observation units',
        example=[
            [
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '25.3',
                '3',
                '50.75',
            ],
            [
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '27.9',
                '1',
                '45.345',
            ],
            [
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '25.5',
                '3',
                '50.76',
            ],
            [
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '28.9',
                '0',
                '46.5',
            ],
        ],
    )
    headerRow: Optional[List[HeaderRowObservationUnitTable]] = Field(
        None,
        description='<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array "headerRow" will always contain "observationUnitDbId" and any or all of the OPTIONAL column header names. \nThe second array "observationVariables" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>',
        example=[
            'observationUnitDbId',
            'observationUnitName',
            'studyDbId',
            'studyName',
            'germplasmDbId',
            'germplasmName',
            'positionCoordinateX',
            'positionCoordinateY',
            'year',
            'field',
            'plot',
            'sub-plot',
            'plant',
            'pot',
            'block',
            'entry',
            'rep',
        ],
    )
    observationVariables: Optional[List[ObservationTableObservationVariables]] = Field(
        None,
        description="The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
        example=[
            {
                'observationVariableDbId': '367aa1a9',
                'observationVariableName': 'Plant height',
            },
            {
                'observationVariableDbId': '2acb934c',
                'observationVariableName': 'Carotenoid',
            },
            {
                'observationVariableDbId': '85a21ce1',
                'observationVariableName': 'Root color',
            },
            {
                'observationVariableDbId': '46f590e5',
                'observationVariableName': 'Virus severity',
            },
        ],
    )


class ObservationVariableSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersExternalReferences
):
    dataTypes: Optional[List[TraitDataType]] = Field(
        None,
        description='List of scale data types to filter search results',
        example=['Numerical', 'Ordinal', 'Text'],
    )
    methodDbIds: Optional[List[str]] = Field(
        None,
        description='List of methods to filter search results',
        example=['07e34f83', 'd3d5517a'],
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='List of observation variable IDs to search for',
        example=['2ef15c9f', '318e7f7d'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='List of human readable observation variable names to search for',
        example=['Plant Height 1', 'Root Color'],
    )
    ontologyDbIds: Optional[List[str]] = Field(
        None,
        description='List of ontology IDs to search for',
        example=['f44f7b23', 'a26b576e'],
    )
    scaleDbIds: Optional[List[str]] = Field(
        None,
        description='List of scales to filter search results',
        example=['a13ecffa', '7e1afe4f'],
    )
    studyDbId: Optional[List[str]] = Field(
        None,
        description='The unique ID of a studies to filter on',
        example=['5bcac0ae', '7f48e22d'],
    )
    traitClasses: Optional[List[str]] = Field(
        None,
        description='List of trait classes to filter search results',
        example=['morphological', 'phenological', 'agronomical'],
    )
    traitDbIds: Optional[List[str]] = Field(
        None,
        description='List of trait unique ID to filter search results',
        example=['ef81147b', '78d82fad'],
    )

class ScaleNewRequest(ScaleBaseClass):
    pass


class TraitNewRequest(TraitBaseClass):
    pass

class EventsResponseResult(BaseModel):
    data: List[Event]


class MethodNewRequest(MethodBaseClass):
    pass


class Observation(ObservationNewRequest):
    observationDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation',
        example='ef24b615',
    )


class EventsResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: EventsResponseResult


class ObservationLevelListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationLevelListResponseResult


class ObservationTableResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationTable


class ObservationSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Observation


class ObservationUnitTableResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnitTable


class OntologyListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: OntologyListResponseResult


class ScaleSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Scale

class TraitSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Trait


class ObservationListResponseResult(BaseModel):
    data: List[Observation]


class ScaleListResponseResult(BaseModel):
    data: List[Scale]


class TraitListResponseResult(BaseModel):
    data: List[Trait]


class ImageNewRequest(BaseModel):
    additionalInfo: Optional[dict] = Field(
        None, description='Additional arbitrary info', example={}
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[ExternalReferences] = None
    imageFileName: Optional[str] = Field(
        None,
        description="The name of the image file. Might be the same as 'imageName', but could be different.",
        example='image_0000231.jpg',
    )
    imageFileSize: Optional[int] = Field(
        None, description='The size of the image in Bytes.', example=50000
    )
    imageHeight: Optional[int] = Field(
        None, description='The height of the image in Pixels.', example=550
    )
    imageLocation: Optional[GeoJSON] = None
    imageName: Optional[str] = Field(
        None,
        description="The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
        example='Tomato Image 1',
    )
    imageTimeStamp: Optional[datetime] = Field(
        None, description='The date and time the image was taken'
    )
    imageURL: Optional[str] = Field(
        None,
        description='The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.',
        example='https://wiki.brapi.org/images/tomato',
    )
    imageWidth: Optional[int] = Field(
        None, description='The width of the image in Pixels.', example=700
    )
    mimeType: Optional[str] = Field(
        None,
        description="The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
        example='image/jpeg',
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with, if applicable.',
        example=['d05dd235', '8875177d', 'c08e81b6'],
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The related observation unit identifier, if relevant.',
        example='b7e690b6',
    )


class ImageSearchRequest(
    SearchRequestParametersPaging, SearchRequestParametersExternalReferences
):
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    imageDbIds: Optional[List[str]] = Field(
        None,
        description='A list of image Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imageFileNames: Optional[List[str]] = Field(
        None,
        description='Image file names to search for.',
        example=['image_01032019.jpg', 'picture_field_1234.jpg'],
    )
    imageFileSizeMax: Optional[int] = Field(
        None, description='A maximum image file size to search for.', example=20000000
    )
    imageFileSizeMin: Optional[int] = Field(
        None, description='A minimum image file size to search for.', example=1000
    )
    imageHeightMax: Optional[int] = Field(
        None, description='A maximum image height to search for.', example=1080
    )
    imageHeightMin: Optional[int] = Field(
        None, description='A minimum image height to search for.', example=720
    )
    imageLocation: Optional[GeoJSONSearchArea] = None
    imageNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['Image 43', 'Tractor in field'],
    )
    imageTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imageTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    imageWidthMax: Optional[int] = Field(
        None, description='A maximum image width to search for.', example=1920
    )
    imageWidthMin: Optional[int] = Field(
        None, description='A minimum image width to search for.', example=1280
    )
    mimeTypes: Optional[List[str]] = Field(
        None,
        description='A set of image file types to search for.',
        example=['image/jpg', 'image/jpeg', 'image/gif'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with to search for',
        example=['47326456', 'fc9823ac'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A set of observation unit identifiers to search for.',
        example=['f5e4b273', '328c9424'],
    )

class ObservationUnitPosition(BaseModel):
    @validator('entryType', pre=True, always=True)
    def capitalize_entry_type(cls, value):
        if value:
            return value.upper()
        return value

    entryType: Optional[EntryType] = Field(
        None,
        description='The type of entry for this observation unit. ex. "CHECK", "TEST", "FILLER"',
        example='TEST',
    )
    geoCoordinates: Optional[GeoJSON] = None
    observationLevel: Optional[ObservationUnitLevelRelationship] = None

    @validator('observationLevelRelationships', pre=True, each_item=True)
    def replace_replicate_with_rep(cls, value):
        if 'levelName' in value and value['levelName'] == 'replicate':
            value['levelName'] = 'rep'
        return value

    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists',
        example=[
            {'levelCode': 'Field_1', 'levelName': 'field', 'levelOrder': 0},
            {'levelCode': 'Block_12', 'levelName': 'block', 'levelOrder': 1},
            {'levelCode': 'Plot_123', 'levelName': 'plot', 'levelOrder': 2},
        ],
    )
    positionCoordinateX: Optional[str] = Field(
        None,
        description='The X position coordinate for an observation unit. Different systems may use different coordinate systems.',
        example='74',
    )
    @validator('positionCoordinateX', 'positionCoordinateY', pre=True, always=True)
    def convert_coordinates_to_str(cls, value):
        if isinstance(value, int):
            return str(value)
        return value
    # generalizing to PositionCoordinateType
    positionCoordinateXType: Optional[PositionCoordinateType] = Field(
        None,
        description="The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
        example='GRID_COL',
    )
    positionCoordinateY: Optional[str] = Field(
        None,
        description='The Y position coordinate for an observation unit. Different systems may use different coordinate systems.',
        example='03',
    )
    # generalizing to PositionCoordinateType
    positionCoordinateYType: Optional[PositionCoordinateType] = Field(
        None,
        description="The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
        example='GRID_ROW',
    )


class ObservationVariable(VariableBaseClass):
    observationVariableDbId: str = Field(
        ...,
        description='Variable unique identifier\n\nMIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.',
        example='b9b7edd1',
    )
    observationVariableName: str = Field(
        ...,
        description='Variable name (usually a short name)\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.',
        example='Variable Name',
    )


class ObservationVariableNewRequest(VariableBaseClass):
    observationVariableName: str = Field(
        ..., description='Variable name (usually a short name)', example='Variable Name'
    )


class MethodSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Method


class ObservationListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationListResponseResult


class ScaleListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ScaleListResponseResult


class TraitListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: TraitListResponseResult


class ObservationVariableSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationVariable


class MethodListResponseResult(BaseModel):
    data: List[Method]


class ObservationVariableListResponseResult(BaseModel):
    data: List[ObservationVariable]


class Image(ImageNewRequest):
    imageDbId: Optional[str] = Field(
        None, description='The unique identifier of an image', example='a55efb9c'
    )


class ObservationUnitNewRequest(BaseModel):
    additionalInfo: Optional[dict] = Field(
        None, description='Additional arbitrary info'
    )
    externalReferences: Optional[ExternalReferences] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='e9d9ed57',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000001',
    )
    locationDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a location, associated with this study',
        example='0e208b20',
    )
    locationName: Optional[str] = Field(
        None,
        description='The human readable name of a location associated with this study',
        example='Field Station Alpha',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationUnitPUI: Optional[str] = Field(
        None,
        description='A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.',
        example='http://pui.per/plot/1a9afc14',
    )
    observationUnitPosition: Optional[ObservationUnitPosition] = None
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a program',
        example='2d763a7a',
    )
    programName: Optional[str] = Field(
        None,
        description='The human readable name of a program',
        example='The Perfect Breeding Program',
    )
    seedLotDbId: Optional[str] = Field(
        None,
        description='The unique identifier for the originating Seed Lot',
        example='261ecb09',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='9865addc',
    )
    studyName: Optional[str] = Field(
        None,
        description='The human readable name for a study',
        example='Purple_Tomato_1',
    )
    treatments: Optional[List[ObservationTreatment]] = Field(
        None,
        description='List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.',
    )
    trialDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trial', example='776a609c'
    )
    trialName: Optional[str] = Field(
        None, description='The human readable name of a trial', example='Purple Tomato'
    )


class ImageSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Image


class MethodListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: MethodListResponseResult


class ObservationVariableListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationVariableListResponseResult


class ImageListResponseResult(BaseModel):
    data: List[Image] = Field(..., description='Array of image meta data')


class ObservationUnit(ObservationUnitNewRequest):
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit\n\nMIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. ',
        example='8c67503c',
    )
    observations: Optional[List[Observation]] = Field(
        None,
        description="All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True.",
    )


class ImageListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageListResponseResult


class ObservationUnitSingleResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnit


class ObservationUnitListResponseResult(BaseModel):
    data: List[ObservationUnit]


class ObservationUnitListResponse(BaseModel):
    context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnitListResponseResult
